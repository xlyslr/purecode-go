/*
思路：https://labuladong.github.io/algo/4/29/106/
分解子问题（想想和遍历二叉树没啥区别，多遍历几个方向）：遍历二维数组，当遇到土地则加1，然后顺便把这个岛淹掉，继续遍历
*/
func numIslands(grid [][]byte) int {
	num := 0
	m, n := len(grid), len(grid[0])
	for i := 0; i < m; i++ {
		for j := 0; j < n; j++ {
			if grid[i][j] == 1 {
				num++
				flood(grid, i, j)
			}
		}
	}
	return num
}

func flood(grid [][]byte, i, j int) {
	m, n := len(grid), len(grid[0])
	if i < 0 || j < 0 || i >= m || j >= n {
		return
	}
	if grid[i][j] == byte(1) {
		grid[i][j] = 0
	} else {
		return
	}
	flood(grid, i-1, j)
	flood(grid, i+1, j)
	flood(grid, i, j-1)
	flood(grid, i, j+1)
}


//total_testcases:49
//total_correct:4
//input_formatted:[["1","1","1","1","0"],["1","1","0","1","0"],["1","1","0","0","0"],["0","0","0","0","0"]]
//expected_output:1
//code_output:0
