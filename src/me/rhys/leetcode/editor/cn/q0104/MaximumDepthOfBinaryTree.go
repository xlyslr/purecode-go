//Given the root of a binary tree, return its maximum depth.
//
// A binary tree's maximum depth is the number of nodes along the longest path
//from the root node down to the farthest leaf node.
//
//
// Example 1:
//
//
//Input: root = [3,9,20,null,null,15,7]
//Output: 3
//
//
// Example 2:
//
//
//Input: root = [1,null,2]
//Output: 2
//
//
//
// Constraints:
//
//
// The number of nodes in the tree is in the range [0, 10‚Å¥].
// -100 <= Node.val <= 100
//
// Related Topics Ê†ë Ê∑±Â∫¶‰ºòÂÖàÊêúÁ¥¢ ÂπøÂ∫¶‰ºòÂÖàÊêúÁ¥¢ ‰∫åÂèâÊ†ë üëç 1272 üëé 0

package q0104

import (
	"math"
	. "rhys.me/purecode-go/src/me/rhys/leetcode/editor/cn"
)

//leetcode submit region begin(Prohibit modification and deletion)
/**
 * Definition for a binary tree node.
 * ÂàÜËß£Â≠êÈóÆÈ¢òÔºöÊ±Ç‰∫åÂèâÊ†ëÁöÑÊúÄÂ§ßÈ´òÂ∫¶ÔºåÂ∞±ÊòØÂàÜÂà´Ê±ÇÂ∑¶Âè≥Â≠êÊ†ëÁöÑÊúÄÂ§ßÈ´òÂ∫¶ÔºåÁÑ∂ÂêéÈÄâÂá∫ÊúÄÂ§ßÁöÑ
 */
func maxDepth(root *TreeNode) int {
	var max = 0
	if root == nil {
		return max
	}
	l := maxDepth(root.Left)
	r := maxDepth(root.Right)
	max = int(math.Max(float64(r+1), float64(l+1)))
	return max
}

//leetcode submit region end(Prohibit modification and deletion)
