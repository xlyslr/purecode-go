//Given head, the head of a linked list, determine if the linked list has a
//cycle in it.
//
// There is a cycle in a linked list if there is some node in the list that can
//be reached again by continuously following the next pointer. Internally, pos is
//used to denote the index of the node that tail's next pointer is connected to.
//Note that pos is not passed as a parameter.
//
// Return true if there is a cycle in the linked list. Otherwise, return false.
//
//
//
// Example 1:
//
//
//Input: head = [3,2,0,-4], pos = 1
//Output: true
//Explanation: There is a cycle in the linked list, where the tail connects to
//the 1st node (0-indexed).
//
//
// Example 2:
//
//
//Input: head = [1,2], pos = 0
//Output: true
//Explanation: There is a cycle in the linked list, where the tail connects to
//the 0th node.
//
//
// Example 3:
//
//
//Input: head = [1], pos = -1
//Output: false
//Explanation: There is no cycle in the linked list.
//
//
//
// Constraints:
//
//
// The number of the nodes in the list is in the range [0, 10‚Å¥].
// -10‚Åµ <= Node.val <= 10‚Åµ
// pos is -1 or a valid index in the linked-list.
//
//
//
// Follow up: Can you solve it using O(1) (i.e. constant) memory?
// Related Topics ÂìàÂ∏åË°® ÈìæË°® ÂèåÊåáÈíà üëç 1350 üëé 0

package leetcode

//leetcode submit region begin(Prohibit modification and deletion)

/**
 * Definition for singly-linked list.
 * type ListNode struct {
 *     Val int
 *     Next *ListNode
 * }
 */
func hasCycle(head *ListNode) bool {
	if head == nil {
		return false
	}
	a, b := head, head
	// Â¶ÇÊûúbÁöÑÂá∫Âè£ÊòØnilÂàôËØ¥ÊòéÊ≤°ÊúâÁéØÔºåËøôÈáåÂè™ÈúÄË¶ÅÂà§Êñ≠Âø´ÊåáÈíàÂç≥ÂèØ
	// b.Next Âà§Á©∫ÂÆûÈôÖÊòØ‰∏∫‰∫ÜÁªßÁª≠Ëµ∞‰∏ÄÊ≠•ÔºåÂõ†‰∏∫Âø´ÊåáÈíà‰∏ÄÊ¨°Âæ™ÁéØËµ∞‰∏§Ê≠•ÔºåÂÆûÈôÖÊòØÊääÂæ™ÁéØÈáåÁöÑÂà§Êñ≠Êå™Âà∞‰∫ÜÂæ™ÁéØÂ§ñËæπ
	for b != nil && b.Next != nil {
		// Â§¥ËÇØÂÆöÁõ∏Á≠âÔºåÊâÄ‰ª•Ë¶ÅÂÖàËµ∑Ë∑ëÔºåÂÜçÂà§Êñ≠ÔºåÂ¶ÇÊûúÊúâÁéØÂ∞±‰ºöÊúâÁõ∏Á≠â
		a = a.Next
		b = b.Next.Next
		// Ê≥®ÊÑèÂà§Êñ≠ÁöÑÊòØÂØπË±°‰∏çÊòØÂÄº
		if a == b {
			return true
		}
	}
	return false
}

//leetcode submit region end(Prohibit modification and deletion)
